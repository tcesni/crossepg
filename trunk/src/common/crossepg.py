# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_crossepg', [dirname(__file__)])
        except ImportError:
            import _crossepg
            return _crossepg
        if fp is not None:
            try:
                _mod = imp.load_module('_crossepg', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _crossepg = swig_import_helper()
    del swig_import_helper
else:
    import _crossepg
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def log_enable():
  return _crossepg.log_enable()
log_enable = _crossepg.log_enable

def log_disable():
  return _crossepg.log_disable()
log_disable = _crossepg.log_disable

def log_open(*args):
  return _crossepg.log_open(*args)
log_open = _crossepg.log_open

def log_close():
  return _crossepg.log_close()
log_close = _crossepg.log_close

def log_add(*args):
  return _crossepg.log_add(*args)
log_add = _crossepg.log_add

def epgdb_aliases_clear():
  return _crossepg.epgdb_aliases_clear()
epgdb_aliases_clear = _crossepg.epgdb_aliases_clear

def epgdb_aliases_add(*args):
  return _crossepg.epgdb_aliases_add(*args)
epgdb_aliases_add = _crossepg.epgdb_aliases_add

def epgdb_channels_count():
  return _crossepg.epgdb_channels_count()
epgdb_channels_count = _crossepg.epgdb_channels_count

def epgdb_channels_get_first():
  return _crossepg.epgdb_channels_get_first()
epgdb_channels_get_first = _crossepg.epgdb_channels_get_first

def epgdb_channels_set_first(*args):
  return _crossepg.epgdb_channels_set_first(*args)
epgdb_channels_set_first = _crossepg.epgdb_channels_set_first

def epgdb_channels_set_last(*args):
  return _crossepg.epgdb_channels_set_last(*args)
epgdb_channels_set_last = _crossepg.epgdb_channels_set_last

def epgdb_channels_get_by_freq(*args):
  return _crossepg.epgdb_channels_get_by_freq(*args)
epgdb_channels_get_by_freq = _crossepg.epgdb_channels_get_by_freq

def epgdb_channels_add(*args):
  return _crossepg.epgdb_channels_add(*args)
epgdb_channels_add = _crossepg.epgdb_channels_add

def epgdb_index_count():
  return _crossepg.epgdb_index_count()
epgdb_index_count = _crossepg.epgdb_index_count

def epgdb_index_empties_count():
  return _crossepg.epgdb_index_empties_count()
epgdb_index_empties_count = _crossepg.epgdb_index_empties_count

def epgdb_index_get_first(*args):
  return _crossepg.epgdb_index_get_first(*args)
epgdb_index_get_first = _crossepg.epgdb_index_get_first

def epgdb_index_empties_get_first():
  return _crossepg.epgdb_index_empties_get_first()
epgdb_index_empties_get_first = _crossepg.epgdb_index_empties_get_first

def epgdb_index_empties_set_first(*args):
  return _crossepg.epgdb_index_empties_set_first(*args)
epgdb_index_empties_set_first = _crossepg.epgdb_index_empties_set_first

def epgdb_index_empties_set_last(*args):
  return _crossepg.epgdb_index_empties_set_last(*args)
epgdb_index_empties_set_last = _crossepg.epgdb_index_empties_set_last

def epgdb_index_empties_add(*args):
  return _crossepg.epgdb_index_empties_add(*args)
epgdb_index_empties_add = _crossepg.epgdb_index_empties_add

def epgdb_index_init():
  return _crossepg.epgdb_index_init()
epgdb_index_init = _crossepg.epgdb_index_init

def epgdb_index_clean():
  return _crossepg.epgdb_index_clean()
epgdb_index_clean = _crossepg.epgdb_index_clean

def epgdb_index_get_by_crc_length(*args):
  return _crossepg.epgdb_index_get_by_crc_length(*args)
epgdb_index_get_by_crc_length = _crossepg.epgdb_index_get_by_crc_length

def epgdb_index_add(*args):
  return _crossepg.epgdb_index_add(*args)
epgdb_index_add = _crossepg.epgdb_index_add

def epgdb_index_mark_all_as_unused():
  return _crossepg.epgdb_index_mark_all_as_unused()
epgdb_index_mark_all_as_unused = _crossepg.epgdb_index_mark_all_as_unused

def epgdb_index_mark_as_used(*args):
  return _crossepg.epgdb_index_mark_as_used(*args)
epgdb_index_mark_as_used = _crossepg.epgdb_index_mark_as_used

def epgdb_index_empty_unused():
  return _crossepg.epgdb_index_empty_unused()
epgdb_index_empty_unused = _crossepg.epgdb_index_empty_unused
class epgdb_search_res_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, epgdb_search_res_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, epgdb_search_res_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["titles"] = _crossepg.epgdb_search_res_t_titles_set
    __swig_getmethods__["titles"] = _crossepg.epgdb_search_res_t_titles_get
    if _newclass:titles = _swig_property(_crossepg.epgdb_search_res_t_titles_get, _crossepg.epgdb_search_res_t_titles_set)
    __swig_setmethods__["channels"] = _crossepg.epgdb_search_res_t_channels_set
    __swig_getmethods__["channels"] = _crossepg.epgdb_search_res_t_channels_get
    if _newclass:channels = _swig_property(_crossepg.epgdb_search_res_t_channels_get, _crossepg.epgdb_search_res_t_channels_set)
    __swig_setmethods__["count"] = _crossepg.epgdb_search_res_t_count_set
    __swig_getmethods__["count"] = _crossepg.epgdb_search_res_t_count_get
    if _newclass:count = _swig_property(_crossepg.epgdb_search_res_t_count_get, _crossepg.epgdb_search_res_t_count_set)
    def __init__(self): 
        this = _crossepg.new_epgdb_search_res_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _crossepg.delete_epgdb_search_res_t
    __del__ = lambda self : None;
epgdb_search_res_t_swigregister = _crossepg.epgdb_search_res_t_swigregister
epgdb_search_res_t_swigregister(epgdb_search_res_t)


def epgdb_search_free(*args):
  return _crossepg.epgdb_search_free(*args)
epgdb_search_free = _crossepg.epgdb_search_free

def epgdb_search_by_name(*args):
  return _crossepg.epgdb_search_by_name(*args)
epgdb_search_by_name = _crossepg.epgdb_search_by_name

def epgdb_search_by_name_freq_time(*args):
  return _crossepg.epgdb_search_by_name_freq_time(*args)
epgdb_search_by_name_freq_time = _crossepg.epgdb_search_by_name_freq_time

def epgdb_title_alloc():
  return _crossepg.epgdb_title_alloc()
epgdb_title_alloc = _crossepg.epgdb_title_alloc

def epgdb_title_free(*args):
  return _crossepg.epgdb_title_free(*args)
epgdb_title_free = _crossepg.epgdb_title_free

def epgdb_calculate_mjd(*args):
  return _crossepg.epgdb_calculate_mjd(*args)
epgdb_calculate_mjd = _crossepg.epgdb_calculate_mjd

def epgdb_titles_count(*args):
  return _crossepg.epgdb_titles_count(*args)
epgdb_titles_count = _crossepg.epgdb_titles_count

def epgdb_read_description(*args):
  return _crossepg.epgdb_read_description(*args)
epgdb_read_description = _crossepg.epgdb_read_description

def epgdb_read_long_description(*args):
  return _crossepg.epgdb_read_long_description(*args)
epgdb_read_long_description = _crossepg.epgdb_read_long_description

def epgdb_titles_set_long_description(*args):
  return _crossepg.epgdb_titles_set_long_description(*args)
epgdb_titles_set_long_description = _crossepg.epgdb_titles_set_long_description

def epgdb_titles_set_description(*args):
  return _crossepg.epgdb_titles_set_description(*args)
epgdb_titles_set_description = _crossepg.epgdb_titles_set_description

def epgdb_titles_get_by_id_and_mjd(*args):
  return _crossepg.epgdb_titles_get_by_id_and_mjd(*args)
epgdb_titles_get_by_id_and_mjd = _crossepg.epgdb_titles_get_by_id_and_mjd

def epgdb_titles_get_by_time(*args):
  return _crossepg.epgdb_titles_get_by_time(*args)
epgdb_titles_get_by_time = _crossepg.epgdb_titles_get_by_time

def epgdb_titles_delete_in_range(*args):
  return _crossepg.epgdb_titles_delete_in_range(*args)
epgdb_titles_delete_in_range = _crossepg.epgdb_titles_delete_in_range

def epgdb_titles_add(*args):
  return _crossepg.epgdb_titles_add(*args)
epgdb_titles_add = _crossepg.epgdb_titles_add
DB_REVISION = _crossepg.DB_REVISION
FLAG_UTF8 = _crossepg.FLAG_UTF8
class epgdb_title_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, epgdb_title_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, epgdb_title_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["event_id"] = _crossepg.epgdb_title_t_event_id_set
    __swig_getmethods__["event_id"] = _crossepg.epgdb_title_t_event_id_get
    if _newclass:event_id = _swig_property(_crossepg.epgdb_title_t_event_id_get, _crossepg.epgdb_title_t_event_id_set)
    __swig_setmethods__["mjd"] = _crossepg.epgdb_title_t_mjd_set
    __swig_getmethods__["mjd"] = _crossepg.epgdb_title_t_mjd_get
    if _newclass:mjd = _swig_property(_crossepg.epgdb_title_t_mjd_get, _crossepg.epgdb_title_t_mjd_set)
    __swig_setmethods__["start_time"] = _crossepg.epgdb_title_t_start_time_set
    __swig_getmethods__["start_time"] = _crossepg.epgdb_title_t_start_time_get
    if _newclass:start_time = _swig_property(_crossepg.epgdb_title_t_start_time_get, _crossepg.epgdb_title_t_start_time_set)
    __swig_setmethods__["length"] = _crossepg.epgdb_title_t_length_set
    __swig_getmethods__["length"] = _crossepg.epgdb_title_t_length_get
    if _newclass:length = _swig_property(_crossepg.epgdb_title_t_length_get, _crossepg.epgdb_title_t_length_set)
    __swig_setmethods__["genre_id"] = _crossepg.epgdb_title_t_genre_id_set
    __swig_getmethods__["genre_id"] = _crossepg.epgdb_title_t_genre_id_get
    if _newclass:genre_id = _swig_property(_crossepg.epgdb_title_t_genre_id_get, _crossepg.epgdb_title_t_genre_id_set)
    __swig_setmethods__["flags"] = _crossepg.epgdb_title_t_flags_set
    __swig_getmethods__["flags"] = _crossepg.epgdb_title_t_flags_get
    if _newclass:flags = _swig_property(_crossepg.epgdb_title_t_flags_get, _crossepg.epgdb_title_t_flags_set)
    __swig_setmethods__["description_crc"] = _crossepg.epgdb_title_t_description_crc_set
    __swig_getmethods__["description_crc"] = _crossepg.epgdb_title_t_description_crc_get
    if _newclass:description_crc = _swig_property(_crossepg.epgdb_title_t_description_crc_get, _crossepg.epgdb_title_t_description_crc_set)
    __swig_setmethods__["description_seek"] = _crossepg.epgdb_title_t_description_seek_set
    __swig_getmethods__["description_seek"] = _crossepg.epgdb_title_t_description_seek_get
    if _newclass:description_seek = _swig_property(_crossepg.epgdb_title_t_description_seek_get, _crossepg.epgdb_title_t_description_seek_set)
    __swig_setmethods__["long_description_crc"] = _crossepg.epgdb_title_t_long_description_crc_set
    __swig_getmethods__["long_description_crc"] = _crossepg.epgdb_title_t_long_description_crc_get
    if _newclass:long_description_crc = _swig_property(_crossepg.epgdb_title_t_long_description_crc_get, _crossepg.epgdb_title_t_long_description_crc_set)
    __swig_setmethods__["long_description_seek"] = _crossepg.epgdb_title_t_long_description_seek_set
    __swig_getmethods__["long_description_seek"] = _crossepg.epgdb_title_t_long_description_seek_get
    if _newclass:long_description_seek = _swig_property(_crossepg.epgdb_title_t_long_description_seek_get, _crossepg.epgdb_title_t_long_description_seek_set)
    __swig_setmethods__["description_length"] = _crossepg.epgdb_title_t_description_length_set
    __swig_getmethods__["description_length"] = _crossepg.epgdb_title_t_description_length_get
    if _newclass:description_length = _swig_property(_crossepg.epgdb_title_t_description_length_get, _crossepg.epgdb_title_t_description_length_set)
    __swig_setmethods__["long_description_length"] = _crossepg.epgdb_title_t_long_description_length_set
    __swig_getmethods__["long_description_length"] = _crossepg.epgdb_title_t_long_description_length_get
    if _newclass:long_description_length = _swig_property(_crossepg.epgdb_title_t_long_description_length_get, _crossepg.epgdb_title_t_long_description_length_set)
    __swig_setmethods__["iso_639_1"] = _crossepg.epgdb_title_t_iso_639_1_set
    __swig_getmethods__["iso_639_1"] = _crossepg.epgdb_title_t_iso_639_1_get
    if _newclass:iso_639_1 = _swig_property(_crossepg.epgdb_title_t_iso_639_1_get, _crossepg.epgdb_title_t_iso_639_1_set)
    __swig_setmethods__["iso_639_2"] = _crossepg.epgdb_title_t_iso_639_2_set
    __swig_getmethods__["iso_639_2"] = _crossepg.epgdb_title_t_iso_639_2_get
    if _newclass:iso_639_2 = _swig_property(_crossepg.epgdb_title_t_iso_639_2_get, _crossepg.epgdb_title_t_iso_639_2_set)
    __swig_setmethods__["iso_639_3"] = _crossepg.epgdb_title_t_iso_639_3_set
    __swig_getmethods__["iso_639_3"] = _crossepg.epgdb_title_t_iso_639_3_get
    if _newclass:iso_639_3 = _swig_property(_crossepg.epgdb_title_t_iso_639_3_get, _crossepg.epgdb_title_t_iso_639_3_set)
    __swig_setmethods__["revision"] = _crossepg.epgdb_title_t_revision_set
    __swig_getmethods__["revision"] = _crossepg.epgdb_title_t_revision_get
    if _newclass:revision = _swig_property(_crossepg.epgdb_title_t_revision_get, _crossepg.epgdb_title_t_revision_set)
    __swig_setmethods__["changed"] = _crossepg.epgdb_title_t_changed_set
    __swig_getmethods__["changed"] = _crossepg.epgdb_title_t_changed_get
    if _newclass:changed = _swig_property(_crossepg.epgdb_title_t_changed_get, _crossepg.epgdb_title_t_changed_set)
    __swig_setmethods__["prev"] = _crossepg.epgdb_title_t_prev_set
    __swig_getmethods__["prev"] = _crossepg.epgdb_title_t_prev_get
    if _newclass:prev = _swig_property(_crossepg.epgdb_title_t_prev_get, _crossepg.epgdb_title_t_prev_set)
    __swig_setmethods__["next"] = _crossepg.epgdb_title_t_next_set
    __swig_getmethods__["next"] = _crossepg.epgdb_title_t_next_get
    if _newclass:next = _swig_property(_crossepg.epgdb_title_t_next_get, _crossepg.epgdb_title_t_next_set)
    def __init__(self): 
        this = _crossepg.new_epgdb_title_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _crossepg.delete_epgdb_title_t
    __del__ = lambda self : None;
epgdb_title_t_swigregister = _crossepg.epgdb_title_t_swigregister
epgdb_title_t_swigregister(epgdb_title_t)

class epgdb_index_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, epgdb_index_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, epgdb_index_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["crc"] = _crossepg.epgdb_index_t_crc_set
    __swig_getmethods__["crc"] = _crossepg.epgdb_index_t_crc_get
    if _newclass:crc = _swig_property(_crossepg.epgdb_index_t_crc_get, _crossepg.epgdb_index_t_crc_set)
    __swig_setmethods__["seek"] = _crossepg.epgdb_index_t_seek_set
    __swig_getmethods__["seek"] = _crossepg.epgdb_index_t_seek_get
    if _newclass:seek = _swig_property(_crossepg.epgdb_index_t_seek_get, _crossepg.epgdb_index_t_seek_set)
    __swig_setmethods__["length"] = _crossepg.epgdb_index_t_length_set
    __swig_getmethods__["length"] = _crossepg.epgdb_index_t_length_get
    if _newclass:length = _swig_property(_crossepg.epgdb_index_t_length_get, _crossepg.epgdb_index_t_length_set)
    __swig_setmethods__["used"] = _crossepg.epgdb_index_t_used_set
    __swig_getmethods__["used"] = _crossepg.epgdb_index_t_used_get
    if _newclass:used = _swig_property(_crossepg.epgdb_index_t_used_get, _crossepg.epgdb_index_t_used_set)
    __swig_setmethods__["prev"] = _crossepg.epgdb_index_t_prev_set
    __swig_getmethods__["prev"] = _crossepg.epgdb_index_t_prev_get
    if _newclass:prev = _swig_property(_crossepg.epgdb_index_t_prev_get, _crossepg.epgdb_index_t_prev_set)
    __swig_setmethods__["next"] = _crossepg.epgdb_index_t_next_set
    __swig_getmethods__["next"] = _crossepg.epgdb_index_t_next_get
    if _newclass:next = _swig_property(_crossepg.epgdb_index_t_next_get, _crossepg.epgdb_index_t_next_set)
    def __init__(self): 
        this = _crossepg.new_epgdb_index_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _crossepg.delete_epgdb_index_t
    __del__ = lambda self : None;
epgdb_index_t_swigregister = _crossepg.epgdb_index_t_swigregister
epgdb_index_t_swigregister(epgdb_index_t)

class epgdb_alias_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, epgdb_alias_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, epgdb_alias_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nid"] = _crossepg.epgdb_alias_t_nid_set
    __swig_getmethods__["nid"] = _crossepg.epgdb_alias_t_nid_get
    if _newclass:nid = _swig_property(_crossepg.epgdb_alias_t_nid_get, _crossepg.epgdb_alias_t_nid_set)
    __swig_setmethods__["tsid"] = _crossepg.epgdb_alias_t_tsid_set
    __swig_getmethods__["tsid"] = _crossepg.epgdb_alias_t_tsid_get
    if _newclass:tsid = _swig_property(_crossepg.epgdb_alias_t_tsid_get, _crossepg.epgdb_alias_t_tsid_set)
    __swig_setmethods__["sid"] = _crossepg.epgdb_alias_t_sid_set
    __swig_getmethods__["sid"] = _crossepg.epgdb_alias_t_sid_get
    if _newclass:sid = _swig_property(_crossepg.epgdb_alias_t_sid_get, _crossepg.epgdb_alias_t_sid_set)
    def __init__(self): 
        this = _crossepg.new_epgdb_alias_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _crossepg.delete_epgdb_alias_t
    __del__ = lambda self : None;
epgdb_alias_t_swigregister = _crossepg.epgdb_alias_t_swigregister
epgdb_alias_t_swigregister(epgdb_alias_t)

class epgdb_channel_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, epgdb_channel_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, epgdb_channel_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nid"] = _crossepg.epgdb_channel_t_nid_set
    __swig_getmethods__["nid"] = _crossepg.epgdb_channel_t_nid_get
    if _newclass:nid = _swig_property(_crossepg.epgdb_channel_t_nid_get, _crossepg.epgdb_channel_t_nid_set)
    __swig_setmethods__["tsid"] = _crossepg.epgdb_channel_t_tsid_set
    __swig_getmethods__["tsid"] = _crossepg.epgdb_channel_t_tsid_get
    if _newclass:tsid = _swig_property(_crossepg.epgdb_channel_t_tsid_get, _crossepg.epgdb_channel_t_tsid_set)
    __swig_setmethods__["sid"] = _crossepg.epgdb_channel_t_sid_set
    __swig_getmethods__["sid"] = _crossepg.epgdb_channel_t_sid_get
    if _newclass:sid = _swig_property(_crossepg.epgdb_channel_t_sid_get, _crossepg.epgdb_channel_t_sid_set)
    __swig_setmethods__["prev"] = _crossepg.epgdb_channel_t_prev_set
    __swig_getmethods__["prev"] = _crossepg.epgdb_channel_t_prev_get
    if _newclass:prev = _swig_property(_crossepg.epgdb_channel_t_prev_get, _crossepg.epgdb_channel_t_prev_set)
    __swig_setmethods__["next"] = _crossepg.epgdb_channel_t_next_set
    __swig_getmethods__["next"] = _crossepg.epgdb_channel_t_next_get
    if _newclass:next = _swig_property(_crossepg.epgdb_channel_t_next_get, _crossepg.epgdb_channel_t_next_set)
    __swig_setmethods__["title_first"] = _crossepg.epgdb_channel_t_title_first_set
    __swig_getmethods__["title_first"] = _crossepg.epgdb_channel_t_title_first_get
    if _newclass:title_first = _swig_property(_crossepg.epgdb_channel_t_title_first_get, _crossepg.epgdb_channel_t_title_first_set)
    __swig_setmethods__["title_last"] = _crossepg.epgdb_channel_t_title_last_set
    __swig_getmethods__["title_last"] = _crossepg.epgdb_channel_t_title_last_get
    if _newclass:title_last = _swig_property(_crossepg.epgdb_channel_t_title_last_get, _crossepg.epgdb_channel_t_title_last_set)
    __swig_setmethods__["aliases"] = _crossepg.epgdb_channel_t_aliases_set
    __swig_getmethods__["aliases"] = _crossepg.epgdb_channel_t_aliases_get
    if _newclass:aliases = _swig_property(_crossepg.epgdb_channel_t_aliases_get, _crossepg.epgdb_channel_t_aliases_set)
    __swig_setmethods__["aliases_count"] = _crossepg.epgdb_channel_t_aliases_count_set
    __swig_getmethods__["aliases_count"] = _crossepg.epgdb_channel_t_aliases_count_get
    if _newclass:aliases_count = _swig_property(_crossepg.epgdb_channel_t_aliases_count_get, _crossepg.epgdb_channel_t_aliases_count_set)
    def __init__(self): 
        this = _crossepg.new_epgdb_channel_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _crossepg.delete_epgdb_channel_t
    __del__ = lambda self : None;
epgdb_channel_t_swigregister = _crossepg.epgdb_channel_t_swigregister
epgdb_channel_t_swigregister(epgdb_channel_t)


def epgdb_open(*args):
  return _crossepg.epgdb_open(*args)
epgdb_open = _crossepg.epgdb_open

def epgdb_close():
  return _crossepg.epgdb_close()
epgdb_close = _crossepg.epgdb_close

def epgdb_load():
  return _crossepg.epgdb_load()
epgdb_load = _crossepg.epgdb_load

def epgdb_save(*args):
  return _crossepg.epgdb_save(*args)
epgdb_save = _crossepg.epgdb_save

def epgdb_clean():
  return _crossepg.epgdb_clean()
epgdb_clean = _crossepg.epgdb_clean

def epgdb_get_fdd():
  return _crossepg.epgdb_get_fdd()
epgdb_get_fdd = _crossepg.epgdb_get_fdd

def epgdb_get_creation_time():
  return _crossepg.epgdb_get_creation_time()
epgdb_get_creation_time = _crossepg.epgdb_get_creation_time

def epgdb_get_update_time():
  return _crossepg.epgdb_get_update_time()
epgdb_get_update_time = _crossepg.epgdb_get_update_time
import os
import re

def epgdb_get_dbroot():
	if os.path.exists("/usr/crossepg"):
		homedir = "/usr/crossepg"
	elif os.path.exists("/var/crossepg"):
		homedir = "/var/crossepg"
	else:
		return False
		
	dbroot = "/hdd/crossepg"
	try:
		f = open("%s/crossepg.config" % (homedir), "r")
	except Exception, e:
		return dbroot
		
	entryRe = re.compile(r"db_root=(.*)")
		
	for line in f.readlines(): 
		entry = re.findall(entryRe, line)
		if entry:
			dbroot = entry[0].strip()
	
	f.close()
	return dbroot
	
def IS_UTF8(flags):
	return flags & 0x01
	
def SET_UTF8(flags):
	return flags | 0x01

def UNSET_UTF8(flags):
	return flags & (~0x01)



