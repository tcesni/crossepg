#summary HowTo make your own script
= Introduction =

CrossEPG can run Python scripts during provider download. Scripts can download complex data (i.e. download epg from a website, parse HTML code and inject data into CrossEPG internal  database), do some task (i.e. do epg data aliasing) and much more.

The goal is to merge Ambrosa E2_LOADEPG [http://www.ambrosa.net] with CrossEPG.


= Details =

*THIS DOCUMENT IS A WORK IN PROGRESS*

==BASICS==
Creating a script require some steps.

1)
Make your Python script. The script must be places under _crossepg/scripts/_ directory.
It's better if you create a subdir under _crossepg/scripts/_ . Your script can import some CrossEPG functions (see below) and/or can import some _scriptlib_ function (see below)

2)
Add your script as a new "script provider". You must create a text file _your_script.conf_ and place into _crossepg/providers/_ dir.
{{{
protocol=script
filename=YOURSCRIPT_RELATIVE_PATH.PY
description=A TEXT WITH SCRIPT DESCRIPTION
}}}

Example _crossepg/providers/test_script.conf_
{{{
protocol=script
filename=test.py
description=example test script (do nothing)
}}}

Example _crossepg/providers/rai_script.conf_
{{{
protocol=script
filename=rai/rai.py
description=Italy RAI website (see scripts/rai/rai.conf)
}}}

==CROSSEPG LIBRARY==
CrossEPG exports some internal functions. These functions can be imported and used in your Python script.
{{{
import crossepg
}}}
You can find some examples inside _crossepg/scrips/example_script.py_ and _crossepg/scripts/test.py_

You can find the full list of exported function into _/usr/lib/python/crossepg.py_ . This path can change because STB devices use different operating system filesystem layout.

In QboxHD and QboxMINI device, the path is _/usr/local/lib/python2.6/crossepg.py_

==SCRIPTLIB LIBRARY==
For your convenience I've made a Python lib _crossepg/scripts/lib/scriptlib.py_ that simplify the access to some CrossEPG native function and add other useful function.
Because _scriptlib.py_ path is not known by Python, it is required to add the _scripts/lib_ path to PATH environment var.
{{{
import os
import crossepg
# location of local Python modules under "scripts/lib" and add it to sys.path()
crossepg_instroot = crossepg.epgdb_get_installroot()
if crossepg_instroot == False:
	sys.exit(1)
libdir = os.path.join(crossepg_instroot , 'scripts/lib')
sys.path.append(libdir)

# import scriptlib module
import scriptlib
}}}

Under _scripts/lib/_ I've added other generic Python module, i.e. _markupbase.py_ and _sgmllib.py_ (very useful for parsing HTML data) because some STB have not in their standard Python tree.

Because _scripts/lib_ is added into PATH as last item, if the module exists in your standard Python tree, it will be used. If not , will be loaded the module under _scripts_libs/_ 